
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CALL COLON COMA CONST DIVISION DO DOUBLE ELSE EQUALS FOR GREATERTHAN ID IF INT LBRACE LBRACKET LESSTHAN LPAREN MAIN METHOD MINUS MINUSMINUS OR PLUS PLUSPLUS RBRACE RBRACKET READ RPAREN SEMICOLON TIMES WHILE WRITE program : variables methods MAIN LBRACE severalstatutes RBRACE\n     statutes :    conditional\n                    | editvariables\n                    | cyclical\n                    | calling\n                    | readwrite\n     editvariables : ID ASSIGN arithexp SEMICOLON\n                        | ID dimensions ASSIGN arithexp SEMICOLON\n                        | selectid PLUSPLUS SEMICOLON\n                        | selectid MINUSMINUS SEMICOLON\n     selectid :         ID\n                        | ID dimensions\n\n     conditional :   IF LPAREN logicexp RPAREN LBRACE severalstatutes RBRACE\n                        | IF LPAREN logicexp RPAREN LBRACE severalstatutes RBRACE ELSE LBRACE severalstatutes RBRACE\n     severalstatutes :  statutes severalstatutes\n                        | statutes\n                        | empty\n     cyclical :    DO LBRACE severalstatutes RBRACE WHILE LPAREN logicexp RPAREN\n                    | WHILE LPAREN logicexp RPAREN LBRACE severalstatutes RBRACE\n                    | FOR LPAREN ID ASSIGN CONST SEMICOLON logicexp SEMICOLON arithexp RPAREN LBRACE severalstatutes RBRACE\n     variables : type ID SEMICOLON variables\n                    | type ID dimensions SEMICOLON\n                    | empty\n     dimensions :  LBRACKET idconst RBRACKET dimensions\n                    | LBRACKET idconst RBRACKET\n     type :        INT\n                    | DOUBLE\n     methods :     METHOD ID LPAREN RPAREN LBRACE severalstatutes RBRACE methods\n                    | empty\n\n     calling :     CALL ID LPAREN RPAREN SEMICOLON\n     readwrite :   READ LPAREN idreadingloop RPAREN SEMICOLON\n                    | WRITE LPAREN writecontent RPAREN SEMICOLON\n     idreadingloop : ID COMA idreadingloop\n                    | ID\n     writecontent : arithfunction\n                     | logicfunction\n     arithexp :    arithterm\n                    | arithterm PLUS arithexp\n                    | arithterm MINUS arithexp\n     arithterm :   arithfunction\n                    | arithfunction TIMES arithterm\n                    | arithfunction DIVISION arithterm\n     arithfunction : idconst\n                    | ID PLUSPLUS\n                    | ID MINUSMINUS\n                    | LPAREN arithexp RPAREN\n     logicexp :    logicterm\n                    | logicterm OR logicexp\n     logicterm :   logicfunction\n                    | logicfunction AND logicterm\n     logicfunction : idconst LESSTHAN idconst\n                    | idconst GREATERTHAN idconst\n                    | idconst EQUALS idconst\n                    | LPAREN logicexp RPAREN\n     idconst :     ID\n                    | CONST\n     empty :\n    '
    
_lr_action_items = {'INT':([0,13,],[5,5,]),'DOUBLE':([0,13,],[6,6,]),'METHOD':([0,2,4,13,18,19,106,],[-57,8,-23,-57,-21,-22,8,]),'MAIN':([0,2,4,7,9,13,18,19,106,127,],[-57,-57,-23,11,-29,-57,-21,-22,-57,-28,]),'$end':([1,42,],[0,-1,]),'ID':([3,5,6,8,15,16,24,26,27,28,29,30,37,44,45,49,50,51,53,54,55,57,67,68,69,70,77,85,86,87,88,89,92,93,94,95,96,104,108,119,121,123,124,126,129,131,132,134,137,138,139,143,144,146,],[10,-26,-27,12,21,32,32,-2,-3,-4,-5,-6,52,21,62,32,21,73,76,62,32,21,62,62,-9,-10,62,21,21,21,21,21,-7,62,62,62,62,76,32,-8,32,-30,-31,-32,21,21,-13,-19,-18,62,32,-14,32,-20,]),'SEMICOLON':([10,14,21,22,41,47,48,56,59,60,62,63,64,65,66,90,91,98,102,103,105,107,109,110,111,112,113,114,115,116,117,118,122,135,],[13,19,-55,-56,-25,69,70,-24,-47,-49,-55,92,-37,-40,-43,-44,-45,119,123,124,126,-54,-48,-50,-51,-52,-53,-38,-39,-41,-42,-46,131,138,]),'LBRACKET':([10,32,41,],[15,15,15,]),'LBRACE':([11,34,40,84,100,136,142,],[16,49,55,108,121,139,144,]),'LPAREN':([12,31,35,36,38,39,44,45,50,52,54,57,67,68,77,85,86,93,94,95,96,120,129,131,138,],[17,44,50,51,53,54,57,67,57,74,77,57,67,67,77,57,57,67,67,67,67,129,57,57,67,]),'CONST':([15,44,45,50,54,57,67,68,77,85,86,87,88,89,93,94,95,96,101,129,131,138,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,122,22,22,22,]),'RBRACE':([16,23,24,25,26,27,28,29,30,43,49,55,69,70,71,82,92,108,119,121,123,124,126,128,130,132,134,137,139,141,143,144,145,146,],[-57,42,-16,-17,-2,-3,-4,-5,-6,-15,-57,-57,-9,-10,99,106,-7,-57,-8,-57,-30,-31,-32,132,134,-13,-19,-18,-57,143,-14,-57,146,-20,]),'IF':([16,24,26,27,28,29,30,49,55,69,70,92,108,119,121,123,124,126,132,134,137,139,143,144,146,],[31,31,-2,-3,-4,-5,-6,31,31,-9,-10,-7,31,-8,31,-30,-31,-32,-13,-19,-18,31,-14,31,-20,]),'DO':([16,24,26,27,28,29,30,49,55,69,70,92,108,119,121,123,124,126,132,134,137,139,143,144,146,],[34,34,-2,-3,-4,-5,-6,34,34,-9,-10,-7,34,-8,34,-30,-31,-32,-13,-19,-18,34,-14,34,-20,]),'WHILE':([16,24,26,27,28,29,30,49,55,69,70,92,99,108,119,121,123,124,126,132,134,137,139,143,144,146,],[35,35,-2,-3,-4,-5,-6,35,35,-9,-10,-7,120,35,-8,35,-30,-31,-32,-13,-19,-18,35,-14,35,-20,]),'FOR':([16,24,26,27,28,29,30,49,55,69,70,92,108,119,121,123,124,126,132,134,137,139,143,144,146,],[36,36,-2,-3,-4,-5,-6,36,36,-9,-10,-7,36,-8,36,-30,-31,-32,-13,-19,-18,36,-14,36,-20,]),'CALL':([16,24,26,27,28,29,30,49,55,69,70,92,108,119,121,123,124,126,132,134,137,139,143,144,146,],[37,37,-2,-3,-4,-5,-6,37,37,-9,-10,-7,37,-8,37,-30,-31,-32,-13,-19,-18,37,-14,37,-20,]),'READ':([16,24,26,27,28,29,30,49,55,69,70,92,108,119,121,123,124,126,132,134,137,139,143,144,146,],[38,38,-2,-3,-4,-5,-6,38,38,-9,-10,-7,38,-8,38,-30,-31,-32,-13,-19,-18,38,-14,38,-20,]),'WRITE':([16,24,26,27,28,29,30,49,55,69,70,92,108,119,121,123,124,126,132,134,137,139,143,144,146,],[39,39,-2,-3,-4,-5,-6,39,39,-9,-10,-7,39,-8,39,-30,-31,-32,-13,-19,-18,39,-14,39,-20,]),'RPAREN':([17,21,22,58,59,60,62,64,65,66,72,74,75,76,78,79,80,81,83,90,91,97,107,109,110,111,112,113,114,115,116,117,118,125,133,140,],[40,-55,-56,84,-47,-49,-55,-37,-40,-43,100,102,103,-34,105,-35,-36,-43,107,-44,-45,118,-54,-48,-50,-51,-52,-53,-38,-39,-41,-42,-46,-33,137,142,]),'RBRACKET':([20,21,22,],[41,-55,-56,]),'LESSTHAN':([21,22,61,62,81,],[-55,-56,87,-55,87,]),'GREATERTHAN':([21,22,61,62,81,],[-55,-56,88,-55,88,]),'EQUALS':([21,22,61,62,81,],[-55,-56,89,-55,89,]),'AND':([21,22,60,107,111,112,113,],[-55,-56,86,-54,-51,-52,-53,]),'OR':([21,22,59,60,107,110,111,112,113,],[-55,-56,85,-49,-54,-50,-51,-52,-53,]),'TIMES':([22,62,65,66,81,90,91,118,],[-56,-55,95,-43,-43,-44,-45,-46,]),'DIVISION':([22,62,65,66,81,90,91,118,],[-56,-55,96,-43,-43,-44,-45,-46,]),'PLUS':([22,62,64,65,66,81,90,91,116,117,118,],[-56,-55,93,-40,-43,-43,-44,-45,-41,-42,-46,]),'MINUS':([22,62,64,65,66,81,90,91,116,117,118,],[-56,-55,94,-40,-43,-43,-44,-45,-41,-42,-46,]),'ASSIGN':([32,41,46,56,73,],[45,-25,68,-24,101,]),'PLUSPLUS':([32,33,41,46,56,62,],[-11,47,-25,-12,-24,90,]),'MINUSMINUS':([32,33,41,46,56,62,],[-11,48,-25,-12,-24,91,]),'COMA':([76,],[104,]),'ELSE':([132,],[136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'variables':([0,13,],[2,18,]),'type':([0,13,],[3,3,]),'empty':([0,2,13,16,24,49,55,106,108,121,139,144,],[4,9,4,25,25,25,25,9,25,25,25,25,]),'methods':([2,106,],[7,127,]),'dimensions':([10,32,41,],[14,46,56,]),'idconst':([15,44,45,50,54,57,67,68,77,85,86,87,88,89,93,94,95,96,129,131,138,],[20,61,66,61,81,61,66,66,81,61,61,111,112,113,66,66,66,66,61,61,66,]),'severalstatutes':([16,24,49,55,108,121,139,144,],[23,43,71,82,128,130,141,145,]),'statutes':([16,24,49,55,108,121,139,144,],[24,24,24,24,24,24,24,24,]),'conditional':([16,24,49,55,108,121,139,144,],[26,26,26,26,26,26,26,26,]),'editvariables':([16,24,49,55,108,121,139,144,],[27,27,27,27,27,27,27,27,]),'cyclical':([16,24,49,55,108,121,139,144,],[28,28,28,28,28,28,28,28,]),'calling':([16,24,49,55,108,121,139,144,],[29,29,29,29,29,29,29,29,]),'readwrite':([16,24,49,55,108,121,139,144,],[30,30,30,30,30,30,30,30,]),'selectid':([16,24,49,55,108,121,139,144,],[33,33,33,33,33,33,33,33,]),'logicexp':([44,50,57,77,85,129,131,],[58,72,83,83,109,133,135,]),'logicterm':([44,50,57,77,85,86,129,131,],[59,59,59,59,59,110,59,59,]),'logicfunction':([44,50,54,57,77,85,86,129,131,],[60,60,80,60,60,60,60,60,60,]),'arithexp':([45,67,68,77,93,94,138,],[63,97,98,97,114,115,140,]),'arithterm':([45,67,68,77,93,94,95,96,138,],[64,64,64,64,64,64,116,117,64,]),'arithfunction':([45,54,67,68,77,93,94,95,96,138,],[65,79,65,65,65,65,65,65,65,65,]),'idreadingloop':([53,104,],[75,125,]),'writecontent':([54,],[78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> variables methods MAIN LBRACE severalstatutes RBRACE','program',6,'p_program','gramatica.py',169),
  ('statutes -> conditional','statutes',1,'p_statutes','gramatica.py',175),
  ('statutes -> editvariables','statutes',1,'p_statutes','gramatica.py',176),
  ('statutes -> cyclical','statutes',1,'p_statutes','gramatica.py',177),
  ('statutes -> calling','statutes',1,'p_statutes','gramatica.py',178),
  ('statutes -> readwrite','statutes',1,'p_statutes','gramatica.py',179),
  ('editvariables -> ID ASSIGN arithexp SEMICOLON','editvariables',4,'p_editvariables','gramatica.py',183),
  ('editvariables -> ID dimensions ASSIGN arithexp SEMICOLON','editvariables',5,'p_editvariables','gramatica.py',184),
  ('editvariables -> selectid PLUSPLUS SEMICOLON','editvariables',3,'p_editvariables','gramatica.py',185),
  ('editvariables -> selectid MINUSMINUS SEMICOLON','editvariables',3,'p_editvariables','gramatica.py',186),
  ('selectid -> ID','selectid',1,'p_selectid','gramatica.py',191),
  ('selectid -> ID dimensions','selectid',2,'p_selectid','gramatica.py',192),
  ('conditional -> IF LPAREN logicexp RPAREN LBRACE severalstatutes RBRACE','conditional',7,'p_conditional','gramatica.py',198),
  ('conditional -> IF LPAREN logicexp RPAREN LBRACE severalstatutes RBRACE ELSE LBRACE severalstatutes RBRACE','conditional',11,'p_conditional','gramatica.py',199),
  ('severalstatutes -> statutes severalstatutes','severalstatutes',2,'p_severalstatutes','gramatica.py',204),
  ('severalstatutes -> statutes','severalstatutes',1,'p_severalstatutes','gramatica.py',205),
  ('severalstatutes -> empty','severalstatutes',1,'p_severalstatutes','gramatica.py',206),
  ('cyclical -> DO LBRACE severalstatutes RBRACE WHILE LPAREN logicexp RPAREN','cyclical',8,'p_cyclical','gramatica.py',211),
  ('cyclical -> WHILE LPAREN logicexp RPAREN LBRACE severalstatutes RBRACE','cyclical',7,'p_cyclical','gramatica.py',212),
  ('cyclical -> FOR LPAREN ID ASSIGN CONST SEMICOLON logicexp SEMICOLON arithexp RPAREN LBRACE severalstatutes RBRACE','cyclical',13,'p_cyclical','gramatica.py',213),
  ('variables -> type ID SEMICOLON variables','variables',4,'p_variables','gramatica.py',218),
  ('variables -> type ID dimensions SEMICOLON','variables',4,'p_variables','gramatica.py',219),
  ('variables -> empty','variables',1,'p_variables','gramatica.py',220),
  ('dimensions -> LBRACKET idconst RBRACKET dimensions','dimensions',4,'p_dimensions','gramatica.py',228),
  ('dimensions -> LBRACKET idconst RBRACKET','dimensions',3,'p_dimensions','gramatica.py',229),
  ('type -> INT','type',1,'p_type','gramatica.py',234),
  ('type -> DOUBLE','type',1,'p_type','gramatica.py',235),
  ('methods -> METHOD ID LPAREN RPAREN LBRACE severalstatutes RBRACE methods','methods',8,'p_methods','gramatica.py',248),
  ('methods -> empty','methods',1,'p_methods','gramatica.py',249),
  ('calling -> CALL ID LPAREN RPAREN SEMICOLON','calling',5,'p_calling','gramatica.py',255),
  ('readwrite -> READ LPAREN idreadingloop RPAREN SEMICOLON','readwrite',5,'p_readwrite','gramatica.py',260),
  ('readwrite -> WRITE LPAREN writecontent RPAREN SEMICOLON','readwrite',5,'p_readwrite','gramatica.py',261),
  ('idreadingloop -> ID COMA idreadingloop','idreadingloop',3,'p_idreadingloop','gramatica.py',268),
  ('idreadingloop -> ID','idreadingloop',1,'p_idreadingloop','gramatica.py',269),
  ('writecontent -> arithfunction','writecontent',1,'p_writecontent','gramatica.py',275),
  ('writecontent -> logicfunction','writecontent',1,'p_writecontent','gramatica.py',276),
  ('arithexp -> arithterm','arithexp',1,'p_arithexp','gramatica.py',281),
  ('arithexp -> arithterm PLUS arithexp','arithexp',3,'p_arithexp','gramatica.py',282),
  ('arithexp -> arithterm MINUS arithexp','arithexp',3,'p_arithexp','gramatica.py',283),
  ('arithterm -> arithfunction','arithterm',1,'p_arithterm','gramatica.py',304),
  ('arithterm -> arithfunction TIMES arithterm','arithterm',3,'p_arithterm','gramatica.py',305),
  ('arithterm -> arithfunction DIVISION arithterm','arithterm',3,'p_arithterm','gramatica.py',306),
  ('arithfunction -> idconst','arithfunction',1,'p_arithfunction','gramatica.py',327),
  ('arithfunction -> ID PLUSPLUS','arithfunction',2,'p_arithfunction','gramatica.py',328),
  ('arithfunction -> ID MINUSMINUS','arithfunction',2,'p_arithfunction','gramatica.py',329),
  ('arithfunction -> LPAREN arithexp RPAREN','arithfunction',3,'p_arithfunction','gramatica.py',330),
  ('logicexp -> logicterm','logicexp',1,'p_logicexp','gramatica.py',335),
  ('logicexp -> logicterm OR logicexp','logicexp',3,'p_logicexp','gramatica.py',336),
  ('logicterm -> logicfunction','logicterm',1,'p_logicterm','gramatica.py',341),
  ('logicterm -> logicfunction AND logicterm','logicterm',3,'p_logicterm','gramatica.py',342),
  ('logicfunction -> idconst LESSTHAN idconst','logicfunction',3,'p_logicfunction','gramatica.py',347),
  ('logicfunction -> idconst GREATERTHAN idconst','logicfunction',3,'p_logicfunction','gramatica.py',348),
  ('logicfunction -> idconst EQUALS idconst','logicfunction',3,'p_logicfunction','gramatica.py',349),
  ('logicfunction -> LPAREN logicexp RPAREN','logicfunction',3,'p_logicfunction','gramatica.py',350),
  ('idconst -> ID','idconst',1,'p_idconst','gramatica.py',355),
  ('idconst -> CONST','idconst',1,'p_idconst','gramatica.py',356),
  ('empty -> <empty>','empty',0,'p_empty','gramatica.py',361),
]
